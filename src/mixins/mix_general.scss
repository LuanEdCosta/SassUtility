@mixin prefix($property, $value, $prefixes: (), $has_default: true) {
    $prefixes: if($prefixes == null, (), $prefixes);
    @each $prefix in $prefixes {
        #{'-' + $prefix + '-' + $property}: $value;
    }
    @if $has_default {
        #{$property}: $value;
    }
}

@mixin value-prefix($property, $value, $prefixes: (), $has_default: true) {
    $prefixes: if($prefixes == null, (), $prefixes);
    @each $prefix in $prefixes {
        #{$property}: #{'-' + $prefix + '-' + $value};
    }
    @if $has_default {
        #{$property}: $value;
    }
}

@mixin prefix-all($declarations, $prefixes: ()) {
    $prefixes: if($prefixes == null, (), $prefixes);
    @each $property, $value in $declarations {
        @each $prefix in $prefixes {
            #{'-' + $prefix + '-' + $property}: $value;
        }
        #{$property}: $value;
    }
}

@mixin with-sides($sides: null, $prop_start: "", $prop_end: "", $short_prop: null, $val: null) {
    @if $sides != null {
        @each $side in $sides {
            #{$prop_start + $side + $prop_end}: $val;
        }
    } @else {
        #{$short_prop}: $val;
    }
}

@mixin list-to-props($list: null, $props: null){
    @if $list != null {
        @for $i from 1 through length($props){
            $prop: nth($props, $i);
            @if length($list) >= $i {
                $val: nth($list, $i);
                #{$prop}: $val;
            }
        }
    }
}

@mixin media($properties, $values, $media_type: screen, $only_or_not: only) {
    @if $properties == null {
        @media #{$only_or_not + ' ' + $media_type} {
            @content;
        }
    } @else {
        $props: "";
        @if length($properties) == 1 {
            $props: "and " + "(" + $properties + ":" + $values + ")";
        } @else {
            @for $i from 1 through length($properties) {
                $props: $props + "and " + "(" + nth($properties, $i) + ":" + nth($values, $i) + ") ";
            }
        }

        @media #{$only_or_not + ' ' + $media_type + ' ' + $props} {
            @content;
        }
    }
}

@mixin pseudo($pseudo: after, $content: "") {
    //With css3 two colons
    &::#{$pseudo} {
        content: $content;
        @content;
    }
}

@mixin cursor($cursor: pointer) {
    cursor: $cursor;
}